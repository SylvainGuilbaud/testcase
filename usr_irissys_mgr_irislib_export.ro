IRIS for UNIX^INT^routine output by %apiRTN^^~Format=IRIS.S~^RAW
%RO on 25 Aug 2022 01:25:47PM
%JSON.Generator.1^INT^1^66346,48157.215093416^0^1
 ;%JSON.Generator.1
 ;Generated for class %JSON.Generator.  Do NOT edit. 08/25/2022 01:22:37PM
 ;;584C614C;%JSON.Generator
 ;
%JSONGenerate(%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context) public {
	Set %code=0
	If '$s($d(^oddCOM(%class,"p","%JSONENABLED",22))#2:^(22),$d(^oddCOM($g(^(2),%class),"p","%JSONENABLED",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(%class,"p","%JSONENABLED",2),%class),"p","%JSONENABLED",22))#2:^(22),1:"")) Quit 1
	Set abstract=$s($d(^oddCOM(%class,21))#2:^(21),1:$s($d(^oddDEF(%class,21))#2:^(21),1:0))
	Set sc=1
	Set sc=..GenerateMapping(%class,.mapping)
	If ('sc) Quit sc
	Set sc=..GenerateMappingFromXdata(%class,.mapping)
	If ('sc) Quit sc
	// Create the map from class properties
	If 'abstract {
		If (''sc) {
			Set sc=..GenerateAllImportInternal(%class,.mapping)
		}
		If (''sc) {
			Set sc=..GenerateAllExportInternal(%class,.mapping,1)
		}
		If (''sc) {
			Set sc=..GenerateAllExportInternal(%class,.mapping,0)
		}
	}
	Quit sc }
zGenExportArray(class,propertyMap,indent) public {
	Set jsonreference=$list(propertyMap,7)
	If jsonreference=3 {
		Set nextFunction="GetObjectNext"
	} ElseIf jsonreference=4 {
		Set nextFunction="GetNext"
	} ElseIf jsonreference=2 {
		Set nextFunction="GetObjectIdNext"
	} Else {
		Set nextFunction="GetNext"
	}
	Set %code($increment(%code))=indent_"  If aval.Count()>0 {"
	Do ..GenWriteField($list(propertyMap,4),indent_"  ","")
	Set %code($increment(%code))=indent_"    Set sep=""{"""
	Set %code($increment(%code))=indent_"    Set aval=.."_$list(propertyMap,2)_",k="""""
	Set %code($increment(%code))=indent_"    For {"
	Set %code($increment(%code))=indent_"      Set value=aval."_nextFunction_"(.k) If k="""" Quit"
	Do ..GenExportField(class,propertyMap,$c(1)_"k",indent_"    ",2)
	Set %code($increment(%code))=indent_"    }"
   	Set %code($increment(%code))=indent_"    "_%outputCode_"""}"""
   	Set %code($increment(%code))=indent_"  }" }
zGenExportBinaryStream(class,propertyMap,fieldName,indent,isCollectionValue) public {
	Do ..GenWriteField(fieldName,indent,"")
	If $list(propertyMap,9)["hex" {
		Set %code($increment(%code))=indent_"  "_%outputCode_""""""""" Do value.Rewind() If value.Size>0 { While 'value.AtEnd { "
		Set %code($increment(%code))=indent_"    Set first=value.Read(.len,.sc) If $$$ISERR(sc) Goto "_%exitCode
    	Set %code($increment(%code))=indent_"    For k=1:8:$length(first)-7 {"_%outputCode_"$tr($j($zhex($zqa($re($e(first,k,k+7)))),16),"" "",""0"") }"
    	Set %code($increment(%code))=indent_"    For k=k+8:1:$length(first) {"_%outputCode_"$select($ascii(first,k)<16:""0"",1:"""")_$zhex($ascii(first,k)) }"
		Set %code($increment(%code))=indent_"  }} "_%outputCode_""""""""""
	} Else {
		Set %code($increment(%code))=indent_"  "_%outputCode_""""""""" Do value.Rewind() If value.Size>0 { While 'value.AtEnd { "_%outputCode_"$system.Encryption.Base64Encode(value.Read(32655,.sc),1) If $$$ISERR(sc) Goto "_%exitCode_" }} "_%outputCode_""""""""""
	} }
zGenExportCharacterStream(class,propertyMap,fieldName,indent,isCollectionValue) public {
	Do ..GenWriteField(fieldName,indent,"")
	Set %code($increment(%code))=indent_"  "_%outputCode_""""""""" Do value.Rewind() If value.Size>0 { While 'value.AtEnd { "_%outputCode_"$zcvt(value.Read(,.sc),""O"",""JSON"") If $$$ISERR(sc) Goto "_%exitCode_" }} "_%outputCode_"""""""""" }
zGenExportField(class,propertyMap,fieldName,indent,isCollectionValue) public {
	Set needClosingBrace=1
	// Generate code to import this property.
	Set membercat=$list(propertyMap,10)
	If membercat["OBJ" {
		// Handle no object specified.
		Set serialTest=$select(membercat["SERIAL":"&&'value.%IsNull()",1:"")
		Set %code($increment(%code))=indent_"  If value'="""""_serialTest_" {"
		Set indent=indent_"  "
		// Output JSON for the object reference
		Set reference=$list(propertyMap,7)
		If reference=2 {
			// Generate code to export object ID.
			Do ..GenExportID(class,propertyMap,fieldName,indent,isCollectionValue)
		} ElseIf reference=3 {
			// Generate code to export object OID.
			Do ..GenExportOID(class,propertyMap,fieldName,indent,isCollectionValue)
		} ElseIf reference=4 {
			// Generate code to export object GUID.
			Do ..GenExportGUID(class,propertyMap,fieldName,indent,isCollectionValue)
		} Else {
			// Generate code to export object references.
			Do ..GenExportObject(class,propertyMap,fieldName,indent,isCollectionValue)
		}
	} ElseIf membercat["STREAM" {
		// Handle no stream specified.
		If $list(propertyMap,9)="string",$list(propertyMap,6) {
			Set needClosingBrace=0
		} Else {
			Set %code($increment(%code))=indent_"  If (value'="""")&&'value.IsNull() {"
			Set indent=indent_"  "
		}
		// Output stream
		If membercat="BSTREAM" {
			// Generate code to export binary stream
			Do ..GenExportBinaryStream(class,propertyMap,fieldName,indent,isCollectionValue)
		} Else {
			// Generate code to export character stream
			Do ..GenExportCharacterStream(class,propertyMap,fieldName,indent,isCollectionValue)
		}
	} Else {
		// Handle no value specified.
		If $list(propertyMap,9)="string",$list(propertyMap,6) {
			Set needClosingBrace=0
		} Else {
			Set %code($increment(%code))=indent_"  If value'="""" {"
			Set indent=indent_"  "
		}
		// Generate code to export literals
		Do ..GenExportLiteral(class,propertyMap,fieldName,indent,isCollectionValue)
	}
   	If needClosingBrace {
		If isCollectionValue || ($list(propertyMap,5) && '$list(propertyMap,6)) {
			Set %code($increment(%code))=indent_"} Else {"
			Do ..GenWriteField(fieldName,indent,"""null""")
	   		Set %code($increment(%code))=indent_"}"
		   	Set %code($increment(%code))=indent_"Set $extract(sep,1)="","""
		} Else {
		   	Set %code($increment(%code))=indent_"  Set $extract(sep,1)="","""
	   		Set %code($increment(%code))=indent_"}"
		}
	} Else {
	   	Set %code($increment(%code))=indent_"  Set $extract(sep,1)="","""
	} }
zGenExportGUID(class,propertyMap,fieldName,indent,isCollectionValue) public {
	Do ..GenWriteField(fieldName,indent,"""""""""_value.%GUID(value.%Oid())_""""""""") }
zGenExportID(class,propertyMap,fieldName,indent,isCollectionValue) public {
	// Write the field value
	If isCollectionValue {
		// GetObjectNextId already returned id
		Do ..GenWriteField(fieldName,indent,"""""""""_$zcvt(value,""O"",""JSON"")_""""""""")
	} Else {
		Do ..GenWriteField(fieldName,indent,"""""""""_$zcvt(value.%Id(),""O"",""JSON"")_""""""""")
	} }
zGenExportList(class,propertyMap,indent) public {
	Set jsonreference=$list(propertyMap,7) 
	If jsonreference=3 {
		Set nextFunction="GetObjectNext"
	} ElseIf jsonreference=4 {
		Set nextFunction="GetNext"
	} ElseIf jsonreference=2 {
		Set nextFunction="GetObjectIdNext"
	} Else {
		Set nextFunction="GetNext"
	}
	Set %code($increment(%code))=indent_"  If aval.Count()>0 {"
	Do ..GenWriteField($list(propertyMap,4),indent_"  ","")
	Set %code($increment(%code))=indent_"    Set sep=""["""
	Set %code($increment(%code))=indent_"    Set k="""" For {"
	Set %code($increment(%code))=indent_"      Set value=aval."_nextFunction_"(.k) If k="""" Quit"
	Do ..GenExportField(class,propertyMap,"","      ",1)
	Set %code($increment(%code))=indent_"    }"
   	Set %code($increment(%code))=indent_"    "_%outputCode_"""]"""
   	Set %code($increment(%code))=indent_"  }" }
zGenExportLiteral(class,propertyMap,fieldName,indent,isCollectionValue) public {
	Set property=$list(propertyMap,1)
	Set type=$list(propertyMap,11)
	// Get information about data type class
	Do ##class(%Compiler.XML.Generator.Adaptor).getPropertyParameters(class,property,.parms)
	Set haveLogicalToJSON=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"LogicalToJSON",.parms,"value",.codeLogicalToJSON)
	// Try to use LogicalToXSD if LogicalToJSON is not specified.  
	// The point is to avoid extra property mnethods being geenrated.
	If 'haveLogicalToJSON {
		Set haveLogicalToJSON=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"LogicalToXSD",.parms,"value",.codeLogicalToJSON)
	}
	If 'haveLogicalToJSON Set codeLogicalToJSON="value"
	Set literaltype=$list(propertyMap,9)
	If $piece(literaltype,"/",1)="string" {
		If literaltype="string" {
			Set codeLogicalToJSON="$select("_$select($list(propertyMap,6):"(value="""""""")||",1:"")_"(value=$c(0)):"""",1:$zcvt("_codeLogicalToJSON_",""O"",""JSON""))"
		}
		Set codeLogicalToJSON="""""""""_"_codeLogicalToJSON_"_"""""""""
	} ElseIf literaltype="boolean" {
		Set codeLogicalToJSON="$select(value:""true"",1:""false"")"
	}
	Do ..GenWriteField(fieldName,indent,codeLogicalToJSON) }
zGenExportOID(class,propertyMap,fieldName,indent,isCollectionValue) public {
	// Write the field value
	If isCollectionValue {
		// GetObjectNextId already returned oid
		Do ..GenWriteField(fieldName,indent,"""""""""_$select($listget(value,2)="""":$listget(aval.GetAt(k).%Oid(),2),1:$listget(value,2))_"",""_$listget(value)_""""""""")
	} Else {
		Do ..GenWriteField(fieldName,indent,"""""""""_$listget(value.%Oid(),2)_"",""_$listget(value.%Oid())_""""""""")
	} }
zGenExportObject(class,propertyMap,fieldName,indent,isCollectionValue) public {
	Set mappingName=$list(propertyMap,12)
	If mappingName'="" {
		Set %code($increment(%code))=indent_"  Set saveMapping=%mappingName,%mappingName="""_mappingName_""""
	}
	// Write the field value
	Do ..GenWriteField(fieldName,indent,"")
	Set %code($increment(%code))=indent_"  Set sc=value."_%objectCode_"() If $$$ISERR(sc) Goto "_%exitCode
	If mappingName'="" {
		Set %code($increment(%code))=indent_"  Set %mappingName=saveMapping"
	} }
zGenImportArray(class,propertyMap,indent) public {
	// If present, then must be the expected JSON object type
	Set %code($increment(%code))=indent_"  If jsontype'=""object"" Goto %JSONImportError"
	Set %code($increment(%code))=indent_"  Set data=%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")
	Set %code($increment(%code))=indent_"  Set iterator=data.%GetIterator()"
	Set %code($increment(%code))=indent_"  While iterator.%GetNext(.index,.value) {"
	Set %code($increment(%code))=indent_"    Set jsontype=$$$JSONGetTypeOf(data,index)"
	Set %code($increment(%code))=indent_"    If jsontype=""null"" {"
	Set %code($increment(%code))=indent_"      Do .."_$list(propertyMap,2)_".SetAt("""",index)"
	Set %code($increment(%code))=indent_"    } Else {"
	Do ..GenImportField(class,propertyMap,indent_"    ",2)
	Set %code($increment(%code))=indent_"  }}" }
zGenImportBinaryStream(class,propertyMap,indent,isCollectionValue) public {
	Set property=$list(propertyMap,1)
	// If present, then must be the expected JSON type
	Set %code($increment(%code))=indent_"  If jsontype'=""string"" Goto %JSONImportError"
	// Get the field value
	If isCollectionValue {
		// Code for new stream to insert
		Set indexarg=$select(isCollectionValue=1:"index+1",1:"index")
		Set %code($increment(%code))=indent_"  Set stream=..##class("_$list(propertyMap,11)_").%New()"
		If $list(propertyMap,9)["hex" {
			Set %code($increment(%code))=indent_"  For i=1:16:$length(value)-15 { Set bin=bin_$re($zqc($zhex($e(value,i,i+15)))) }"
			Set %code($increment(%code))=indent_"  For i=i+16:2:$length(value)-1 { Set bin=bin_$char($zhex($extract(value,i,i+1))) }"
			Set %code($increment(%code))=indent_"  Set sc=stream.Write(value) If $$$ISERR(sc) Goto %JSONImportExit"
		} Else {
			Set %code($increment(%code))=indent_"  Set sc=stream.Write($system.Encryption.Base64Decode(value)) If $$$ISERR(sc) Goto %JSONImportExit"
		}
		If isCollectionValue=1 {
			// Generate code to save value in list
			Set %code($increment(%code))=indent_"  Do .."_$list(propertyMap,2)_".Insert(stream)"
		} Else {
			// Generate code to save value in array
			Set %code($increment(%code))=indent_"  Do .."_$list(propertyMap,2)_".SetAt(stream,index)"
		}
	} Else {
		// Code to use property stream
		Set %code($increment(%code))=indent_"  Set tStream = %JSONObject.%Get("""_$list(propertyMap,4)_""",,""stream"")"
		Set %code($increment(%code))=indent_"  Set stream=.."_$list(propertyMap,2)_" Do stream.Rewind()"
		Set %code($increment(%code))=indent_"  If tStream.Size>0 { While 'tStream.AtEnd {"
		If $list(propertyMap,9)["hex" {
			Set %code($increment(%code))=indent_"  Set value=tStream.Read(32000),bin="""""
			Set %code($increment(%code))=indent_"  For i=1:16:$length(value)-15 { Set bin=bin_$re($zqc($zhex($e(value,i,i+15)))) }"
			Set %code($increment(%code))=indent_"  For i=i+16:2:$length(value)-1 { Set bin=bin_$char($zhex($extract(value,i,i+1))) }"
			Set %code($increment(%code))=indent_"  Set sc=stream.Write(bin) If $$$ISERR(sc) Goto %JSONImportExit"
		} Else {
			Set %code($increment(%code))=indent_"    Set rc=stream.Write($system.Encryption.Base64Decode(tStream.Read(43540,.sc))) Set:$$$ISERR(rc) sc=$$$ADDSC(sc,rc) If $$$ISERR(sc) Goto %JSONImportExit"
		}
		Set %code($increment(%code))=indent_"  }}"
		Set %code($increment(%code))=indent_"  Set %JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")_" = """""
		Set %code($increment(%code))=indent_"  Do %JSONObject.%Remove("""_$list(propertyMap,4)_""")"
	} }
zGenImportCharacterStream(class,propertyMap,indent,isCollectionValue) public {
	Set property=$list(propertyMap,1)
	// If present, then must be the expected JSON type
	Set %code($increment(%code))=indent_"  If jsontype'=""string"" Goto %JSONImportError"
	// Get the field value
	If isCollectionValue {
		// Code for new stream to insert
		Set indexarg=$select(isCollectionValue=1:"index+1",1:"index")
		Set %code($increment(%code))=indent_"  Set stream=..##class("_$list(propertyMap,11)_").%New()"
		Set %code($increment(%code))=indent_"  Set sc=stream.Write(value) If $$$ISERR(sc) Goto %JSONImportExit"
		If isCollectionValue=1 {
			// Generate code to save value in list
			Set %code($increment(%code))=indent_"  Do .."_$list(propertyMap,2)_".Insert(stream)"
		} Else {
			// Generate code to save value in array
			Set %code($increment(%code))=indent_"  Do .."_$list(propertyMap,2)_".SetAt(stream,index)"
		}
	} Else {
		// Code to use property stream
    Set %code($increment(%code))=indent_"  Set tStream = %JSONObject.%Get("""_$list(propertyMap,4)_""",,""stream"")"
		Set %code($increment(%code))=indent_"  Set stream=.."_$list(propertyMap,2)_" Do stream.Rewind()"
    Set %code($increment(%code))=indent_"  If tStream.Size>0 { "
		Set %code($increment(%code))=indent_"    Set sc=stream.CopyFrom(tStream) If $$$ISERR(sc) Goto %JSONImportExit"
    Set %code($increment(%code))=indent_"  }"
    Set %code($increment(%code))=indent_"  Set %JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")_" = """""
    Set %code($increment(%code))=indent_"  Do %JSONObject.%Remove("""_$list(propertyMap,4)_""")"
	} }
zGenImportField(class,propertyMap,indent,isCollectionValue) public {
	// Generate code to import this property.
	Set membercat=$list(propertyMap,10)
	If membercat["OBJ" {
		Set reference=$list(propertyMap,7)
		If reference=2 {
			// Generate code to import object ID.
			Do ..GenImportID(class,propertyMap,indent,isCollectionValue)
		} ElseIf reference=3 {
			// Generate code to import object OID.
			Do ..GenImportOID(class,propertyMap,indent,isCollectionValue)
		} ElseIf reference=4 {
			// Generate code to import object GUID.
			Do ..GenImportGUID(class,propertyMap,indent,isCollectionValue)
		} Else {
			// Generate code to import object references.
			Do ..GenImportObject(class,propertyMap,indent,isCollectionValue)
		}
	} ElseIf membercat["STREAM" {
		// Input stream
		If membercat="BSTREAM" {
			// Generate code to import binary stream
			Do ..GenImportBinaryStream(class,propertyMap,indent,isCollectionValue)
		} Else {
			// Generate code to import character stream
			Do ..GenImportCharacterStream(class,propertyMap,indent,isCollectionValue)
		}
	} Else {
		// Generate code to import literals
		Do ..GenImportLiteral(class,propertyMap,indent,isCollectionValue)
	}
	Set %code($increment(%code))=indent_"}" }
zGenImportGUID(class,propertyMap,indent,isCollectionValue) public {
	// If present, then must be the expected JSON type
	Set %code($increment(%code))=indent_"  If jsontype'=""string"" Goto %JSONImportError"
	// Get the field value
	If isCollectionValue {
		Set indexarg=$select(isCollectionValue=1:"index+1",1:"index")
		Set %code($increment(%code))=indent_"  Do .."_$list(propertyMap,2)_".SetObjectAt(##class(%Library.GUID).%GUIDFind(value),"_indexarg_")"
	} Else {
		Set %code($increment(%code))=indent_"  Do .."_$select($zname($list(propertyMap,1)_"SetObject",6):$list(propertyMap,1)_"SetObject",1:""""_$replace($list(propertyMap,1)_"SetObject","""","""""")_"""")_"(##class(%Library.GUID).%GUIDFind(%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")_"))"
	} }
zGenImportID(class,propertyMap,indent,isCollectionValue) public {
	// If present, then must be the expected JSON type
	Set %code($increment(%code))=indent_"  If jsontype'=""string"",jsontype'=""number"" Goto %JSONImportError"
	// Get the field value
	If isCollectionValue {
		Set indexarg=$select(isCollectionValue=1:"index+1",1:"index")
		Set %code($increment(%code))=indent_"  Do .."_$list(propertyMap,2)_".SetObjectIdAt(value,"_indexarg_")"
	} Else {
		Set %code($increment(%code))=indent_"  Do .."_$select($zname($list(propertyMap,1)_"SetObjectId",6):$list(propertyMap,1)_"SetObjectId",1:""""_$replace($list(propertyMap,1)_"SetObjectId","""","""""")_"""")_"(%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")_")"
	} }
zGenImportList(class,propertyMap,indent) public {
	// If present, then must be the expected JSON array type
	Set %code($increment(%code))=indent_"  If jsontype'=""array"" Goto %JSONImportError"
	Set %code($increment(%code))=indent_"  Set data=%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")
	// Get each element of the array.
	Set %code($increment(%code))=indent_"  For index=0:1:data.%Size()-1 {"
	// Get the field value
	Set %code($increment(%code))=indent_"    Set jsontype=$$$JSONGetTypeOf(data,index)"
	Set %code($increment(%code))=indent_"    If jsontype=""null"" {"
	Set %code($increment(%code))=indent_"      Do .."_$list(propertyMap,2)_".Insert("""")"
	Set %code($increment(%code))=indent_"    } Else {"
	Set %code($increment(%code))=indent_"      Set value=data.%Get(index)"
	// Generate code to import list element
	Do ..GenImportField(class,propertyMap,indent_"    ",1)
	Set %code($increment(%code))=indent_"  }}" }
zGenImportLiteral(class,propertyMap,indent,isCollectionValue) public {
	Set property=$list(propertyMap,1)
	Set type=$list(propertyMap,11)
	Set literaltype=$list(propertyMap,9)
	// If present, then must be the expected JSON type
	If literaltype="double" {
		Set %code($increment(%code))=indent_"  If jsontype'=""number"",jsontype'=""string"" Goto %JSONImportError"
	} Else {
		Set %code($increment(%code))=indent_"  If jsontype'="""_$piece(literaltype,"/",1)_""" Goto %JSONImportError"
	}
	// Get the field value
	If isCollectionValue {
		Set var="value"
	} Else {
		Set var="data"
	}
	Set useProperty='isCollectionValue
	If literaltype'="boolean" { // boolean JSON values need nop additional processing.
		// Get information about data type class
		Do ##class(%Compiler.XML.Generator.Adaptor).getPropertyParameters(class,property,.parms)
		Set haveJSONToLogical=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"JSONToLogical",.parms,var,.codeJSONToLogical)
		// Try to use XSDToLogical if JSONToLogical is not specified.  
		// The point is to avoid extra property mnethods being geenrated.
		If 'haveJSONToLogical {
			Set haveJSONToLogical=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"XSDToLogical",.parms,var,.codeJSONToLogical)
		}
		Set haveIsValid=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"IsValid",.parms,var,.codeIsValid)
		// Call datatype methods
		Set line=""
		If haveJSONToLogical {
			Set line=line_" Set "_var_"="_codeJSONToLogical_" Goto:"_var_"="""" %JSONImportError"
		}
		If haveIsValid {
			Set line=line_" If $$$ISERR("_codeIsValid_") Goto %JSONImportError"
		}
		If line'="" {
			If useProperty {
				Set useProperty=0
				Set %code($increment(%code))=indent_"  Set data=%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")
			}
			Set %code($increment(%code))=indent_" "_line
		}
		// Handle the ignorenull case
		If literaltype="string",'$list(propertyMap,6) {
			If useProperty {
				Set useProperty=0
				Set %code($increment(%code))=indent_"  Set data=%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")
			}
			Set %code($increment(%code))=indent_"  If "_var_"="""" Set "_var_"=$c(0)"
		}
	}
	If isCollectionValue=1 {
		// Generate code to save value in list
		Set %code($increment(%code))=indent_"  Do .."_$list(propertyMap,2)_".Insert("_var_")"
	} ElseIf isCollectionValue=2 {
		// Generate code to save value in array
		Set %code($increment(%code))=indent_"  Do .."_$list(propertyMap,2)_".SetAt("_var_",index)"
	} Else {
		// Code to store the property value
		If useProperty Set var="%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")
		Set %code($increment(%code))=indent_"  Set .."_$list(propertyMap,2)_"="_var
	} }
zGenImportOID(class,propertyMap,indent,isCollectionValue) public {
	// If present, then must be the expected JSON type
	Set %code($increment(%code))=indent_"  If jsontype'=""string"" Goto %JSONImportError"
	// Get the field value
	Set var=$select(isCollectionValue:"value",1:"data")
	Set exp="$lb($piece("_var_","","",2,*),$piece("_var_","","",1))"
	If isCollectionValue {
		Set indexarg=$select(isCollectionValue=1:"index+1",1:"index")
		Set %code($increment(%code))=indent_"  Do .."_$list(propertyMap,2)_".SetObjectAt("_exp_","_indexarg_")"
	} Else {
		Set %code($increment(%code))=indent_"  Set data=%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")
		Set %code($increment(%code))=indent_"  Do .."_$select($zname($list(propertyMap,1)_"SetObject",6):$list(propertyMap,1)_"SetObject",1:""""_$replace($list(propertyMap,1)_"SetObject","""","""""")_"""")_"("_exp_")"
	} }
zGenImportObject(class,propertyMap,indent,isCollectionValue) public {
	Set mappingName=$list(propertyMap,12)
	// If present, then must be the expected JSON type
	Set %code($increment(%code))=indent_"  If jsontype=""object"" {"
	// Get a new empty object
	Set %code($increment(%code))=indent_"    Set newobj=##class("_$list(propertyMap,11)_").%JSONNew(%JSONObject,$this)"
	// Get the field value
	Set %code($increment(%code))=indent_"    Set saveJSON=%JSONObject"
	If mappingName'="" {
		Set %code($increment(%code))=indent_"    Set saveMapping=%mappingName,%mappingName="""_mappingName_""""
	}
	Set %code($increment(%code))=indent_"    Set %JSONObject="_$select(isCollectionValue:"value",1:"%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_""""))
	// Call adapter for referenced object.
	Set %code($increment(%code))=indent_"    Set sc=newobj.%JSONImportInternal()"
	Set %code($increment(%code))=indent_"    Set %JSONObject=saveJSON"
	If mappingName'="" {
		Set %code($increment(%code))=indent_"    Set %mappingName=saveMapping"
	}
	Set %code($increment(%code))=indent_"    If $$$ISERR(sc) Goto %JSONImportExit"
	If isCollectionValue=1 {
		// Generate code to save value in list
		Set %code($increment(%code))=indent_"    Do .."_$list(propertyMap,2)_".Insert(newobj)"
	} ElseIf isCollectionValue=2 {
		// Generate code to save value in array
		Set %code($increment(%code))=indent_"    Do .."_$list(propertyMap,2)_".SetAt(newobj,index)"
	} Else {
		// Code to store the property value
		Set %code($increment(%code))=indent_"    Set .."_$list(propertyMap,2)_"=newobj"
	}
	Set %code($increment(%code))=indent_"  } ElseIf jsontype=""oref"" {"
	If isCollectionValue=1 {
		// Generate code to save value in list
		Set %code($increment(%code))=indent_"    Do .."_$list(propertyMap,2)_".Insert(value)"
	} ElseIf isCollectionValue=2 {
		// Generate code to save value in array
		Set %code($increment(%code))=indent_"    Do .."_$list(propertyMap,2)_".SetAt(value,index)"
	} Else {
		// Code to store the property value
		Set %code($increment(%code))=indent_"    Set .."_$list(propertyMap,2)_"=%JSONObject."_$select($zname($list(propertyMap,4),6):$list(propertyMap,4),1:""""_$replace($list(propertyMap,4),"""","""""")_"""")
	}
	Set %code($increment(%code))=indent_"  } Else { Goto %JSONImportError }" }
zGenWriteField(fieldName,indent,valueText) public {
	If fieldName'="" {
		// If first character of fieldName is $c(1), then the name is actually a variable name that contains field name
		If $extract(fieldName,1)=$c(1) {
			Set field="""_"_$replace($zcvt($extract(fieldName,2,*),"O","JSON"),"""","""""")_"_"""
		} Else {
			set field=$replace($zcvt(fieldName,"O","JSON"),"""","""""")
		}
		If valueText'="" {
			Set %code($increment(%code))=indent_"  "_%outputCode_"sep_"_""""""""_field_""""""_$select($extract(valueText,1)="""":":"_$extract(valueText,2,*),1:":""_"_valueText)
		} Else {
			Set %code($increment(%code))=indent_"  "_%outputCode_"sep_"_""""""""_field_""""":"""
		}
	} Else {
		Set %code($increment(%code))=indent_"  "_%outputCode_"sep"_$select(valueText="":"",1:"_")_valueText
	} }
zGenerateAllExportInternal(class,mapping,useWrite) public {
	New %code,%outputCode,%exitCode,%objectCode
	Set %code=0
	Set sc=1
	Try {
		// Setup the output code for write or string concatenation.
		If useWrite {
			Set %outputCode="Write "
			Set %exitCode="%JSONExportExit"
			Set %objectCode="%JSONExportInternal"
		} Else {
			Set %outputCode="Set %export=%export_"
			Set %exitCode="%JSONExportExitToString"
			Set %objectCode="%JSONExportToStringInternal"
		}
		// Begin output of code
		Set %code($increment(%code))="  Set sc=$$$OK"
		Set %code($increment(%code))="  "_%outputCode_"""{"" Set sep="""""
		// Process all mappings except base
		Set indent=""
		Set mappingName=$c(1)
		Set count=0
		For {
			Set mappingName=$order(mapping(mappingName))
			If mappingName="" Quit
			Set %code($increment(%code))="  "_$select(count=0:"If",1:"} ElseIf")_" %mappingName="""_mappingName_""" {"
			Set count=count+1
			Set indent="  "
			Set sc=..GenerateExportInternal(class,indent,mappingName,.mapping)
			If ('sc) Quit
		}
		If ('sc) Quit
		// Add in base mapping.
		If count>0 Set %code($increment(%code))="  } Else {"
		Set sc=..GenerateExportInternal(class,indent,$c(1),.mapping)
		If ('sc) Quit
		If count>0 Set %code($increment(%code))="  }"
    	Set %code($increment(%code))="  "_%outputCode_"""}"""
		Set %code($increment(%code))=%exitCode_" Quit sc"
		// Save the code for this method
		Merge %ISCCompile(4,"%JSONExport"_$select(useWrite:"",1:"ToString")_"Internal")=%code
	} Catch ex {
		Set sc=ex.AsStatus()
	}
	Quit sc }
zGenerateAllImportInternal(class,mapping) public {
	New %code
	Set %code=0
	Set sc=1
	Try {
		Set %code($increment(%code))="  Set sc=$$$OK"
		Set needTestInvalidField=0
		Set needRequired=0
		// Process all mappings except base
		Set indent=""
		Set mappingName=$c(1)
		Set count=0
		For {
			Set mappingName=$order(mapping(mappingName))
			If mappingName="" Quit
			Set %code($increment(%code))="  "_$select(count=0:"If",1:"} ElseIf")_" %mappingName="""_mappingName_""" {"
			Set count=count+1
			Set indent="  "
			Set sc=..GenerateImportInternal(class,indent,mappingName,.mapping,.needRequired,.needTestInvalidField)
			If ('sc) Quit
		}
		If ('sc) Quit
		// Add in base mapping.
		If count>0 Set %code($increment(%code))="  } Else {"
		Set sc=..GenerateImportInternal(class,indent,$c(1),.mapping,.needRequired,.needTestInvalidField)
		If ('sc) Quit
		If count>0 Set %code($increment(%code))="  }"
		// Generate code to check for invalid field
		If needTestInvalidField {
			Set %code($increment(%code))="  If $get(testInvalidField) {"
			Set %code($increment(%code))="    Set invalid=0,iterator=%JSONObject.%GetIterator()"
			Set %code($increment(%code))="    While iterator.%GetNext(.key,.value) { If $data(proplist(key))=0 Set invalid=1 Quit  }"
			Set %code($increment(%code))="    If invalid Quit $$$ERROR($$$JSONImportBadField,key,$$$mappingNameDisplay(%mappingName))"
			Set %code($increment(%code))="  }"
		}
		Set %code($increment(%code))="%JSONImportExit Quit sc"
		Set %code($increment(%code))="%JSONImportError Quit $$$ERROR($$$JSONImportError,field,$$$mappingNameDisplay(%mappingName))"
		If needRequired Set %code($increment(%code))="%JSONImportRequired Quit $$$ERROR($$$JSONImportRequired,field,$$$mappingNameDisplay(%mappingName))"
		// Save the code for this method
		Merge %ISCCompile(4,"%JSONImportInternal")=%code
	} Catch ex {
		Set sc=ex.AsStatus()
	}
	Quit sc }
zGenerateExportInternal(class,indent,mappingName,mapping) public {
	Set sc=1
	// Loop over all properties
	For index=1:1:$get(mapping(mappingName)) {
		Set propertyMap=$get(mapping(mappingName,index))
		Set fieldname=$list(propertyMap,4)
		// Skip procssing for inputonly and none values of JSONINCLUDE.
		If $list(propertyMap,3)'["out" Continue
		// Generate code to import this property.
		Set membercat=$list(propertyMap,10)
		If membercat["Collection" {
			// Generate code to import collections
			Set %code($increment(%code))="    Set aval=.."_$list(propertyMap,2)
			If membercat["List" {
				// Generate code to import lists
				Do ..GenExportList(class,propertyMap,indent)
			} Else {
				// Generate code to import arrays
				Do ..GenExportArray(class,propertyMap,indent)
			}
		} Else {
			// Generate code to import this non-collection field
			Set %code($increment(%code))=indent_"  Set value=.."_$list(propertyMap,2)
			Do ..GenExportField(class,propertyMap,fieldname,indent,0)
		}
	}
	Quit sc }
zGenerateImportInternal(class,indent,mappingName,mapping,needRequired,needTestInvalidField) public {
	Set sc=1
	Set ignoreInvalidField=$listget(mapping(mappingName,0),2)
	If 'ignoreInvalidField {
		Set needTestInvalidField=1
		Set %code($increment(%code))=indent_"  Set testInvalidField=1"
	}
	For index=1:1:$get(mapping(mappingName)) {
		Set propertyMap=$get(mapping(mappingName,index))
		Set fieldname=$replace($list(propertyMap,4),"""","""""")
		// Code to indicate property seen
		If 'ignoreInvalidField {
			Set %code($increment(%code))=indent_"  Set proplist("""_fieldname_""")="""""
		}
		// Skip processing for outputonly and none values of JSONINCLUDE.
		If $list(propertyMap,3)'["in" Continue
		// Code to test if field is present
		Set %code($increment(%code))=indent_"  Set field="""_fieldname_""" Set jsontype=$$$JSONGetTypeOf(%JSONObject,field)"
		Set %code($increment(%code))=indent_"  If jsontype'=""unassigned"" {"
		//Set %code($increment(%code))=indent_"    If (jsontype=""string"")&&(%JSONObject.%Get(field)="""") Set jsontype=""null"""
		Set %code($increment(%code))=indent_"    If (jsontype=""string"")&&(%JSONObject.%Get(field,,""stream"")="""") Set jsontype=""null"""
		Set %code($increment(%code))=indent_"    If jsontype=""null"" {"
		// null value does not satisfy field required.
		If $list(propertyMap,8) {
			Set %code($increment(%code))=indent_"      Goto %JSONImportRequired"
		} Else {
			Set %code($increment(%code))=indent_"      Set .."_$list(propertyMap,2)_"="""""
		}
		Set %code($increment(%code))=indent_"    } Else {"
		// Generate code to import this property.
		Set membercat=$list(propertyMap,10)
		If membercat["Collection" {
			// Generate code to import collections
			If membercat["List" {
				// Generate code to import lists
				Do ..GenImportList(class,propertyMap,indent_"    ")
			} Else {
				// Generate code to import arrays
				Do ..GenImportArray(class,propertyMap,indent_"    ")
			}
		} Else {
			// Generate code to import this non-collection field
			Do ..GenImportField(class,propertyMap,indent_"    ",0)
		}
		// Handle checking for field required.
		If $list(propertyMap,8) {
			Set %code($increment(%code))=indent_"  } Else { Goto %JSONImportRequired }"
			Set needRequired=1
		} Else {
			Set %code($increment(%code))=indent_"  }"
		}
	}
	Quit sc }
zGenerateMapping(class,mapping) public {
	// Initialize map to empty
	Kill mapping
	// Get the inheritance order
	Do ..LeftSequenceClass(class,.classSeq)
	// Get %JSONIGNOREINVALIDFIELD parameter
	Set jsonignoreinvalidfield=''$s($d(^oddCOM(class,"p","%JSONIGNOREINVALIDFIELD",22))#2:^(22),$d(^oddCOM($g(^(2),class),"p","%JSONIGNOREINVALIDFIELD",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(class,"p","%JSONIGNOREINVALIDFIELD",2),class),"p","%JSONIGNOREINVALIDFIELD",22))#2:^(22),1:""))
	// Get %JSONMAPPING class parameter.
	Set jsondefaultmapping=$s($d(^oddCOM(class,"p","%JSONMAPPING",22))#2:^(22),$d(^oddCOM($g(^(2),class),"p","%JSONMAPPING",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(class,"p","%JSONMAPPING",2),class),"p","%JSONMAPPING",22))#2:^(22),1:""))
	// Get default for %JSONNULL
	Set jsondefaultnull=''$s($d(^oddCOM(class,"p","%JSONNULL",22))#2:^(22),$d(^oddCOM($g(^(2),class),"p","%JSONNULL",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(class,"p","%JSONNULL",2),class),"p","%JSONNULL",22))#2:^(22),1:""))
	// Get default for %JSONIGNORENULL
	Set jsondefaultignorenull=''$s($d(^oddCOM(class,"p","%JSONIGNORENULL",22))#2:^(22),$d(^oddCOM($g(^(2),class),"p","%JSONIGNORENULL",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(class,"p","%JSONIGNORENULL",2),class),"p","%JSONIGNORENULL",22))#2:^(22),1:""))
	// Get default for %JSONREFERENCE
	Set jsondefaultreference=$zcvt($s($d(^oddCOM(class,"p","%JSONREFERENCE",22))#2:^(22),$d(^oddCOM($g(^(2),class),"p","%JSONREFERENCE",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(class,"p","%JSONREFERENCE",2),class),"p","%JSONREFERENCE",22))#2:^(22),1:"")),"U")
	If jsondefaultreference="" Set jsondefaultreference="OBJECT"
	If $case(jsondefaultreference,"OBJECT":0,"ID":0,"OID":0,"GUID":0,:1) {
		Quit $$Error^%apiOBJ(9400,"parameter %JSONREFERENCE","class base")
	}
	// Create map node for each property
	Set sc=1
	Set property=""
	For {
		Set property=$o(^oddCOM(class,"a",property))
		If property="" Quit
		// Get %JSONINCLUDE property parameter
		Set jsoninclude=$zcvt($s($d(^oddCOM(class,"a",property,"P","%JSONINCLUDE"))#2:^("%JSONINCLUDE"),$d(^oddCOM($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONINCLUDE"))#2:^("%JSONINCLUDE"),1:$g(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONINCLUDE"))),"L")
		Set includeProperty=$case(jsoninclude,"":"","inout":1,"inputonly":1,"outputonly":1,"none":1,:-1)
		If includeProperty=-1 {
			Set sc=$$Error^%apiOBJ(9401,"parameter %JSONINCLUDE",property,"class base")
			Quit
		}
		// Get details of the property's type
		Do ..GetMemberInfo(class,property,.includeProperty,.type,.membercat)
		If includeProperty {
			// Default for %JSONINCLUDE is "inout"
			If jsoninclude="" Set jsoninclude="inout"
			// Do not support array of streams
			If membercat["STREAM",membercat["Array" {
				Set sc=$$Error^%apiOBJ(9402,property,"class base")
				Quit
			}
			// For string types, set literaltype to string, base64 or hex.
			Set literaltype=""
			If membercat["CSTREAM" {
				Set literaltype="string"
			} ElseIf membercat["BSTREAM" {
				Set encoding=$s($d(^oddCOM(class,"a",property,"P","ENCODING"))#2:^("ENCODING"),$d(^oddCOM($g(^oddCOM(class,"a",property,2),class),"a",property,"P","ENCODING"))#2:^("ENCODING"),1:$g(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,"P","ENCODING")))
				Set literaltype=$case($zcvt(encoding,"L"),"":"base64","base64":"base64","hex":"hex",:"")
				If literaltype="" {
					Set sc=$$Error^%apiOBJ(6258,encoding,property)
					Quit
				}
			} ElseIf membercat["LITERAL" {
				Set literaltype=$s($d(^oddCOM(type,"p","JSONTYPE",22))#2:^(22),$d(^oddCOM($g(^(2),type),"p","JSONTYPE",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(type,"p","JSONTYPE",2),type),"p","JSONTYPE",22))#2:^(22),1:""))
				If literaltype="" Set literaltype="string"
				// We need to differentiate between registered object strings and JSON strings.
				// For example between %String and %Timestamp.
				// A string is considered a registered object string if XSDTYPE, as well as JSONTYPE, is = "string".
				If literaltype="string",$s($d(^oddCOM(type,"p","XSDTYPE",22))#2:^(22),$d(^oddCOM($g(^(2),type),"p","XSDTYPE",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(type,"p","XSDTYPE",2),type),"p","XSDTYPE",22))#2:^(22),1:""))'="string" {
					Set literaltype="string/json"
				}
			}
			// Find actual class where property is defined.
			Set defClass=$s($d(^oddCOM(class,"a",property,2))#2:^(2),$d(^oddCOM($g(^(2),class),"a",property,2))#2:^(2),1:$s($d(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,2))#2:^(2),1:""))
			// Find if required
			Set required=$s($d(^oddCOM(class,"a",property,37))#2:^(37),$d(^oddCOM($g(^(2),class),"a",property,37))#2:^(37),1:$s($d(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,37))#2:^(37),1:0))
			// Get JSON field name. If not specified, then it defaults to the property name.
			Set jsonfieldname=$s($d(^oddCOM(class,"a",property,"P","%JSONFIELDNAME"))#2:^("%JSONFIELDNAME"),$d(^oddCOM($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONFIELDNAME"))#2:^("%JSONFIELDNAME"),1:$g(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONFIELDNAME")))
			If jsonfieldname="" Set jsonfieldname=property
			// Get %JSONNULL property parameter.  Default is %JSONNULL class parameter.
			Set jsonnull=$s($d(^oddCOM(class,"a",property,"P","%JSONNULL"))#2:^("%JSONNULL"),$d(^oddCOM($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONNULL"))#2:^("%JSONNULL"),1:$g(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONNULL")))
			Set jsonnull=$select(jsonnull="":jsondefaultnull,1:''jsonnull)
			// Get %JSONIGNORENULL property parameter.  Default is %JSONIGNORENULL class parameter.
			If literaltype="string" {
				Set jsonignorenull=$s($d(^oddCOM(class,"a",property,"P","%JSONIGNORENULL"))#2:^("%JSONIGNORENULL"),$d(^oddCOM($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONIGNORENULL"))#2:^("%JSONIGNORENULL"),1:$g(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONIGNORENULL")))
				Set jsonignorenull=$select(jsonignorenull="":jsondefaultignorenull,1:''jsonignorenull)
			} Else {
				Set jsonignorenull=0
			}
			// Get %JSONREFERENCE property parameter.  Default is %JSONREFERENCE class parameter.
			If membercat["OBJ" {
				Set jsonreference=$zcvt($s($d(^oddCOM(class,"a",property,"P","%JSONREFERENCE"))#2:^("%JSONREFERENCE"),$d(^oddCOM($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONREFERENCE"))#2:^("%JSONREFERENCE"),1:$g(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONREFERENCE"))),"U")
				If jsonreference="" Set jsonreference=jsondefaultreference
				Set jsonreference=$case(jsonreference,
										"OBJECT":1,
										"ID":2,
										"OID":3,
										"GUID":4,
										:"")
				If jsonreference="" {
					Set sc=$$Error^%apiOBJ(9401,"parameter %JSONREFERENCE",property,"class base")
					Quit
				}
				// Get JSON mapping for object references.
				Set jsonmapping=$s($d(^oddCOM(class,"a",property,"P","%JSONMAPPING"))#2:^("%JSONMAPPING"),$d(^oddCOM($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONMAPPING"))#2:^("%JSONMAPPING"),1:$g(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,"P","%JSONMAPPING")))
				If jsonmapping="" Set jsonmapping=jsondefaultmapping
			} Else {
				Set jsonreference=""
			}
			// Set the node
			Set node=$lb(property,$select($zname(property,6):property,1:""""_$replace(property,"""","""""")_""""),jsoninclude,jsonfieldname,jsonnull,jsonignorenull,jsonreference,required,literaltype,membercat,type,jsonmapping)
			Set item=$increment(tempmap)
			Set tempmap(
			    +classSeq-classSeq(defClass)+1,
			    +$s($d(^oddDEF(defClass,"a",property,11))#2:^(11),1:0),
			    item)=node
		}
	}
	// Copy nodes to map ordered by Sequence Number
	If (''sc) {
		Set mapping($c(1),0)=$lb(class,jsonignoreinvalidfield)
		Set mapping($c(1))=0
		Set cls=""
		For {
			Set cls=$order(tempmap(cls))
			If cls="" Quit
			Set prop=""
			For {
				Set prop=$order(tempmap(cls,prop))
				If prop="" Quit
				Set num=""
				For {
					Set num=$order(tempmap(cls,prop,num))
					If num="" Quit
					Set item=mapping($c(1))+1
					Set mapping($c(1))=item
					Set mapping($c(1),item)=tempmap(cls,prop,num)
				}
			}
		}
	}
	Quit sc }
zGenerateMappingFromClass(class,name,obj,mapping) public {
	kill mapping(name)
	// Get %JSONIGNOREINVALIDFIELD parameter
	Set jsonignoreinvalidfield=obj.IgnoreInvalidField
	// Get %JSONMAPPING class parameter.
	Set jsondefaultmapping=obj.Mapping
	// Get default for %JSONNULL
	Set jsondefaultnull=''obj.Null
	// Get default for %JSONIGNORENULL
	Set jsondefaultignorenull=''obj.IgnoreNull
	// Get default for %JSONREFERENCE
	Set jsondefaultreference=$zcvt(obj.Reference,"U")
	If jsondefaultreference="" Set jsondefaultreference="OBJECT"
	If $case(jsondefaultreference,"OBJECT":0,"ID":0,"OID":0,"GUID":0,:1) {
		Quit $$Error^%apiOBJ(9400,"attribute reference",$select(name="":"class base",1:name))
	}
	// Save mappng parameterd for entire class
	Set mapping(name,0)=$lb(class,jsonignoreinvalidfield)
	// Create map node for each property
	Set sc=1
	For i=1:1:obj.propertyList.Count() {
		Set property=obj.propertyList.GetAt(i)
		If property="" {
			Set sc=$$Error^%apiOBJ(9409,$select(name="":"class base",1:name))
			Quit
		}
		Set propertyName=property.Name
		If '$d(^oddCOM(class,"a",propertyName)) {
			Set sc=$$Error^%apiOBJ(9410,propertyName,$select(name="":"class base",1:name))
			Quit
		}
		// Get %JSONINCLUDE property parameter
		Set jsoninclude=$zcvt(property.Include,"L")
		Set includeProperty=$case(jsoninclude,"":"","inout":1,"inputonly":1,"outputonly":1,"none":1,:-1)
		If includeProperty=-1 {
			Set sc=$$Error^%apiOBJ(9401,"attribute Include",property,$select(name="":"class base",1:name))
			Quit
		}
		// Get details of the property's type
		Do ..GetMemberInfo(class,propertyName,.includeProperty,.type,.membercat)
		If includeProperty {
			// Default for %JSONINCLUDE is "inout"
			If jsoninclude="" Set jsoninclude="inout"
			// Do not support array of streams
			If membercat["STREAM",membercat["Array" {
				Set sc=$$Error^%apiOBJ(9402,property,$select(name="":"class base",1:name))
				Quit
			}
			// For string types, set literaltype to string, base64 or hex.
			Set literaltype=""
			If membercat["CSTREAM" {
				Set literaltype="string"
			} ElseIf membercat["BSTREAM" {
				Set encoding=$s($d(^oddCOM(class,"a",propertyName,"P","ENCODING"))#2:^("ENCODING"),$d(^oddCOM($g(^oddCOM(class,"a",propertyName,2),class),"a",propertyName,"P","ENCODING"))#2:^("ENCODING"),1:$g(^oddDEF($g(^oddCOM(class,"a",propertyName,2),class),"a",propertyName,"P","ENCODING")))
				Set literaltype=$case($zcvt(encoding,"L"),"":"base64","base64":"base64","hex":"hex",:"")
				If literaltype="" {
					Set sc=$$Error^%apiOBJ(6258,encoding,property)
					Quit
				}
			} ElseIf membercat["LITERAL" {
				Set literaltype=$s($d(^oddCOM(type,"p","JSONTYPE",22))#2:^(22),$d(^oddCOM($g(^(2),type),"p","JSONTYPE",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(type,"p","JSONTYPE",2),type),"p","JSONTYPE",22))#2:^(22),1:""))
				If literaltype="" Set literaltype="string"
				// We need to differentiate between registered object strings and JSON strings.
				// For example between %String and %Timestamp.
				// A string is considered a registered object string if XSDTYPE, as well as JSONTYPE, is = "string".
				If literaltype="string",$s($d(^oddCOM(type,"p","XSDTYPE",22))#2:^(22),$d(^oddCOM($g(^(2),type),"p","XSDTYPE",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(type,"p","XSDTYPE",2),type),"p","XSDTYPE",22))#2:^(22),1:""))'="string" {
					Set literaltype="string/json"
				}
			}
			// Find if required
			Set required=$s($d(^oddCOM(class,"a",propertyName,37))#2:^(37),$d(^oddCOM($g(^(2),class),"a",propertyName,37))#2:^(37),1:$s($d(^oddDEF($g(^oddCOM(class,"a",propertyName,2),class),"a",propertyName,37))#2:^(37),1:0))
			// Get JSON field name. If not specified, then it defaults to the property name.
			Set jsonfieldname=property.FieldName
			If jsonfieldname="" Set jsonfieldname=propertyName
			// Get %JSONNULL property parameter.  Default is %JSONNULL class parameter.
			Set jsonnull=property.Null
			Set jsonnull=$select(jsonnull="":jsondefaultnull,1:''jsonnull)
			// Get %JSONIGNORENULL property parameter.  Default is %JSONIGNORENULL class parameter.
			If literaltype="string" {
				Set jsonignorenull=property.IgnoreNull
				Set jsonignorenull=$select(jsonignorenull="":jsondefaultignorenull,1:''jsonignorenull)
			} Else {
				Set jsonignorenull=0
			}
			// Get %JSONREFERENCE property parameter.  Default is %JSONREFERENCE class parameter.
			If membercat["OBJ" {
				Set jsonreference=$zcvt(property.Reference,"U")
				If jsonreference="" Set jsonreference=jsondefaultreference
				Set jsonreference=$case(jsonreference,
										"OBJECT":1,
										"ID":2,
										"OID":3,
										"GUID":4,
										:"")
				If jsonreference="" {
					Set sc=$$Error^%apiOBJ(9401,"attribute Reference",property)
					Quit
				}
				// Get JSON mapping for object references.
				Set jsonmapping=property.Mapping
				If jsonmapping="" Set jsonmapping=jsondefaultmapping
			} Else {
				Set jsonreference=""
			}
			// Set the node
			Set mapping(name,$increment(mapping(name)))=
			   $lb(propertyName,$select($zname(propertyName,6):propertyName,1:""""_$replace(propertyName,"""","""""")_""""),jsoninclude,jsonfieldname,jsonnull,jsonignorenull,jsonreference,required,literaltype,membercat,type,jsonmapping)
		}
	}
	Quit sc }
zGenerateMappingFromXdata(class,mapping) public {
	Set compiledclass=##class(%Dictionary.CompiledClass).%OpenId(class,,.sc)
	If ('sc) Quit sc
	Set count=compiledclass.XDatas.Count()
	For i=1:1:count {
		Set xdata=compiledclass.XDatas.GetAt(i)
		Set configName=xdata.Name
		If configName="" Continue
	Set reader=##class(%XML.Reader).%New()
		Set reader.KeepWhitespace=0
		Set sc=reader.OpenStream(xdata.Data)
		If ('sc) Quit
	Set document=reader.Document
	Set node=document.GetDocumentElement()
		If node="" Continue
		If node.LocalName'="Mapping" Continue
		If node.Namespace'="http://www.intersystems.com/jsonmapping" {
			Set sc=$$Error^%apiOBJ(9407,node.QName,$select(configName="":"class base",1:configName))
			Quit
		}
		Do reader.CorrelateRoot("%JSON.Mapping")
		If 'reader.Next(.obj,.sc) Quit
		If reader.Next(.dummy) {
			Set sc=$$Error^%apiOBJ(9408,$select(configName="":"class base",1:configName))
			Quit
		}
		Set sc=..GenerateMappingFromClass(class,configName,obj,.mapping)
		If ('sc) Quit
	}
	Quit sc }
zGetMemberInfo(class,property,includeProperty,type,membercat) public {
	Set collection=$s($d(^oddCOM(class,"a",property,27))#2:^(27),$d(^oddCOM($g(^(2),class),"a",property,27))#2:^(27),1:$s($d(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,27))#2:^(27),1:""))
	Set relationship=$s($d(^oddCOM(class,"a",property,36))#2:^(36),$d(^oddCOM($g(^(2),class),"a",property,36))#2:^(36),1:$s($d(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,36))#2:^(36),1:0))
	Set cardinality=$s($d(^oddCOM(class,"a",property,24))#2:^(24),$d(^oddCOM($g(^(2),class),"a",property,24))#2:^(24),1:$s($d(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,24))#2:^(24),1:""))
	// Determine default property include if not already specified
	If includeProperty = "" {
		If $s($d(^oddCOM(class,"a",property,33))#2:^(33),$d(^oddCOM($g(^(2),class),"a",property,33))#2:^(33),1:$s($d(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,33))#2:^(33),1:0)) {
			Set includeProperty = 0
		} ElseIf $s($d(^oddCOM(class,"a",property,35))#2:^(35),$d(^oddCOM($g(^(2),class),"a",property,35))#2:^(35),1:$s($d(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,35))#2:^(35),1:0))||(property="%Concurrency") {
			Set includeProperty = 0
		} ElseIf relationship,cardinality'="children",cardinality'="many" {
			Set includeProperty = 0
		} Else {
			Set includeProperty = 1
		}
	}
	If includeProperty {
		Set type=$s($d(^oddCOM(class,"a",property,5))#2:^(5),$d(^oddCOM($g(^(2),class),"a",property,5))#2:^(5),1:$s($d(^oddDEF($g(^oddCOM(class,"a",property,2),class),"a",property,5))#2:^(5),1:""))
		If type="" Set type="%Library.String"
		Set typecat=$s($d(^oddCOM(type,23))#2:^(23),1:$$ClassType^%occName(type))
		// Get member category for base type
		Set membercat=##class(%Compiler.XML.Generator.Adaptor).TypeToMembercat(type,typecat,.mixed)
		// If no membercat, then do not include property
		If membercat="" Set includeProperty=0
	}
	If includeProperty {
		// Modify membercat for collections
		If relationship {
			If (cardinality = "many") || (cardinality = "children") {
				// RELATIONSHIP MANY|CHILDREN = ListCollectionOBJPERSISTENT
				Set membercat = "ListCollection"_membercat
			}
		} Else {
			If collection="" {
				// Not a collection - LITERAL|OBJPERSISTENT|OBJSERIAL|OBJREGISTERED
				If (membercat'="LITERAL") {
					// Get list of super classes
					Kill typeSeq
					Do ##class(%Compiler.XML.Generator.Adaptor).SequenceClass(type,.typeSeq)
					// Check for collection
					If $data(typeSeq("%Library.ArrayOfDataTypes")) {
						Set membercat = "ArrayCollection"
					} ElseIf $data(typeSeq("%Library.ArrayOfObjects")) {
						Set membercat = "ArrayCollection"
					} ElseIf $data(typeSeq("%Library.ListOfDataTypes")) {
						Set membercat = "ListCollection"
					} ElseIf $data(typeSeq("%Library.ListOfObjects")) {
						Set membercat = "ListCollection"
					}
					If membercat["Collection" {
						Set type=$s($d(^oddCOM(type,"p","ELEMENTTYPE",22))#2:^(22),$d(^oddCOM($g(^(2),type),"p","ELEMENTTYPE",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(type,"p","ELEMENTTYPE",2),type),"p","ELEMENTTYPE",22))#2:^(22),1:""))
						If membercat'["OBJ",type="" Set type="%Library.String"
						If type="" {
							Set sc=$$Error^%apiOBJ(6250,property)
							Quit
						}
						Set type=$s(type="":"",type[".":type,$e(type)'="%":"User."_type,1:"%Library."_$e(type,2,*))
						Set typecat=$s($d(^oddCOM(type,23))#2:^(23),1:$$ClassType^%occName(type))
						Set membercat=membercat_##class(%Compiler.XML.Generator.Adaptor).TypeToMembercat(type,typecat,.mixed)
					}
				}
			} Else {
				if collection = "list" {
					// LIST COLLECTION and LITERAL     = ListCollectionLITERAL
					// LIST COLLECTION and otherwise   = ListCollectionOBJ
					Set membercat="ListCollection"_membercat
				} ElseIf collection = "array" {
					// ARRAY and LITERAL               = ArrayCollectionLITERAL
					// ARRAY and otherwise             = ArrayCollectionOBJ
					Set membercat="ArrayCollection"_membercat
				}
			}
		}
	} }
zJSONExportInternal(%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context) public {
	Set %code=0
	If $s($d(^oddCOM(%class,"p","%JSONENABLED",22))#2:^(22),$d(^oddCOM($g(^(2),%class),"p","%JSONENABLED",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(%class,"p","%JSONENABLED",2),%class),"p","%JSONENABLED",22))#2:^(22),1:"")) {
		Merge %code=%ISCCompile(4,"%JSONExportInternal")
	}
	Quit 1 }
zJSONExportToStringInternal(%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context) public {
	Set %code=0
	If $s($d(^oddCOM(%class,"p","%JSONENABLED",22))#2:^(22),$d(^oddCOM($g(^(2),%class),"p","%JSONENABLED",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(%class,"p","%JSONENABLED",2),%class),"p","%JSONENABLED",22))#2:^(22),1:"")) {
		Merge %code=%ISCCompile(4,"%JSONExportToStringInternal")
	}
	Quit 1 }
zJSONImportInternal(%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context) public {
	Set %code=0
	If $s($d(^oddCOM(%class,"p","%JSONENABLED",22))#2:^(22),$d(^oddCOM($g(^(2),%class),"p","%JSONENABLED",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(%class,"p","%JSONENABLED",2),%class),"p","%JSONENABLED",22))#2:^(22),1:"")) {
		Merge %code=%ISCCompile(4,"%JSONImportInternal")
	}
	Quit 1 }
zJSONNew(%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context) public {
	Set %code=0
	If $s($d(^oddCOM(%class,"p","%JSONENABLED",22))#2:^(22),$d(^oddCOM($g(^(2),%class),"p","%JSONENABLED",22))#2:^(22),1:$s($d(^oddDEF($g(^oddCOM(%class,"p","%JSONENABLED",2),%class),"p","%JSONENABLED",22))#2:^(22),1:"")) {
		Set %code($increment(%code))="  Quit ##class("_%class_").%New()"
	}
	Quit 1 }
zLeftSequenceClass(class,seqArray) public {
	If '$data(seqArray(class)) Set seqArray(class)=$increment(seqArray)
	Set superList=$s($d(^oddCOM(class,60))#2:^(60),1:$s($d(^oddDEF(class,60))#2:^(60),1:""))
	Set len=$length(superList,",")
	For i=len:-1:1 {
		Set super=$piece(superList,",",i)
		If super'="" {
			Do ..LeftSequenceClass(super,.seqArray)
		}
	}
	Quit }



